(define checkLetSet ()) {
    (let v:Integer 6)
    (let a:Boolean (equal v 6))
    (set v 10)
    (let b:Boolean (equal v 10))
    (return (and a b))
}

(define checkCond ()) {
    (cond [true true] [else false])
}

(define checkFor ()) {
    (let a:Integer 0)
    (for i '(1 2 3)) {
        (set a (plus a i))
    }
    (let f:Boolean (equal a 6))
    (set a 0)
    (let l:List (for/list (i '(1 2 3)) (plus i i)))
    (let t:Boolean (equal (head l) 2))
    (return (and f t))
}

(define checkArithmetic ()) {
    (let a:Boolean (equal (plus 3 5) 8))
    (let b:Boolean (equal (minus 8 10) -2))
    (let c:Boolean (equal (mul 3 5) 15))
    (let d:Boolean (equal (div 9 3) 3.0))
    (let e:Boolean (equal (plus 3.1 5.6) 8.7))
    (let f:Boolean (equal (minus 3.8 2.3) 1.5))
    (let g:Boolean (equal (mul 1.2 8.2) 9.84))
    (return (and a (and b (and c (and d (and e (and f g)))))))
}

(define checkList ()) {
    (let l:List (list "a" 1 2 3))
    (let a:Boolean (equal (head l) "a"))
    (let b:Boolean (equal (tail l) 3))
    (let c:Boolean (equal (plus (head (rest l)) (tail (rest l))) 4))
    (let d:Boolean (not (empty l)))
    (let n:List (append '(1 2 3) '(4 5 6)))
    (let e:Boolean (equal (plus (head n) (tail n)) 7))
    (return (and a (and b (and c (and d e)))))
}

(define checkArray ()) {
    (let ar:Array (array 1 2 3 4 5))
    (let a:Boolean (equal (array-get ar 1) 3))
    (set ar (array-rem ar 1))
    (let b:Boolean (equal (array-get ar 1) 4))
    (set ar (array-add ar 1 9))
    (let c:Boolean (equal (array-get ar 1) 9))
    (set ar (array-set ar 1 0))
    (let d:Boolean (equal (array-get ar 1) 0))
    (return (and a (and b (and c d))))
}

(checkLetSet)
(checkCond)
(checkFor)
(checkArithmetic)
(checkList)
(checkArray)